package basic;


import java.util.List;
import com.ftn.sbnz.model.models.House;
import com.ftn.sbnz.model.models.Cottage
import com.ftn.sbnz.model.models.Apartment
import com.ftn.sbnz.model.models.RealEstate
import com.ftn.sbnz.model.enums.CottageLocationType
import com.ftn.sbnz.model.models.SearchParametersHouse
import com.ftn.sbnz.model.models.SearchParametersCottage
import com.ftn.sbnz.model.models.SearchParametersApartment
import java.util.List;

global java.util.List  recommendations;

rule "ApartmentMatchesSearchParameters"
when
    $searchParams : SearchParametersApartment() // Uzmi objekat pretrage iz sesije
    $apartment : Apartment(
        // Proveri da li apartman zadovoljava uslove pretrage
        price <= $searchParams.getMaxPrice(),
        yearBuilt >= $searchParams.getMinYearBuilt(),
        numOfBathrooms >= $searchParams.getMinNumOfBathrooms(),
        floorLevel >= $searchParams.getMinFloorLevel(),
        numOfParkingSpaces >= $searchParams.getMinNumOfParkingSpaces(),
        distanceFromCityCenter >= $searchParams.getMinDistanceFromCityCenter(),
        area >= $searchParams.getMinArea()
    )
then
    System.out.println("Ovaj apartman zadovoljava kriterijume pretrage.");
    // Ako apartman zadovoljava uslove, dodaj ga u listu preporuka
    recommendations.add($apartment);
end

rule "HouseMatchesSearchParameters"
when
    $searchParams : SearchParametersHouse() // Uzmi objekat pretrage iz sesije
    $house : House(
        // Proveri da li kuća zadovoljava uslove pretrage
        price <= $searchParams.getMaxPrice(),
        yearBuilt >= $searchParams.getMinYearBuilt(),
        numOfBathrooms >= $searchParams.getMinNumOfBathrooms(),
        floors >= $searchParams.getMinFloors(),
        hasGarage == $searchParams.isHasGarden()
    )
then
    System.out.println("zadovoljava ova kuca ");
    // Ako kuća zadovoljava uslove, dodaj je u listu preporuka
    recommendations.add($house);
end

rule "CottageMatchesSearchParameters"
when
    $searchParams : SearchParametersCottage() // Uzmi objekat pretrage iz sesije
    $cottage : Cottage(
        // Proveri da li kuća zadovoljava uslove pretrage
        price <= $searchParams.getMaxPrice(),
        yearBuilt >= $searchParams.getMinYearBuilt(),
        numOfBathrooms >= $searchParams.getMinNumOfBathrooms(),
        sizeOfGarden >= $searchParams.getMinSizeOfGarden(),
        numOfParkingSpaces >= $searchParams.getMinNumOfParkingSpaces(),
        locationType == $searchParams.getLocationType()
    )
then
    System.out.println("Vikendica zadovoljava uslove pretrage: " + $cottage);
    // Ako kuća zadovoljava uslove, dodaj je u listu preporuka
    recommendations.add($cottage);
end


//rule "PrintAttributesIfMaxPriceGreaterThanOne"
//when
//    $searchParams: SearchParametersHouse(maxPrice > 1)
//then
//    System.out.println("Max Pricerools: " + $searchParams.getMaxPrice());
//    System.out.println("Min Year Built: " + $searchParams.getMinYearBuilt());
//    System.out.println("Min Number of Bathroomsroosl: " + $searchParams.getMinNumOfBathrooms());
//    System.out.println("Min Floorsrools: " + $searchParams.getMinFloors());
//    System.out.println("Has Gardenrools : " + $searchParams.isHasGarden());
//end
//
//
//rule "HosueWithMoreThanTwoRooms"
//when
//    $house: House(numOfBathrooms > 2)
//then
//    recommendations.add($house);
//end
//
//rule "HouseWithMoreThanTwoBathrooms"
//    when
//        $house : House(numOfBathrooms > 2)
//    then
//        recommendations.add($house);
//end
//
//rule "CottageNearSea"
//    when
//        $cottage : Cottage(locationType == CottageLocationType.NEAR_SEA)
//    then
//        recommendations.add($cottage);
//end
//
//rule "CottageNearRiver"
//    when
//        $cottage : Cottage(locationType == CottageLocationType.NEAR_RIVER)
//    then
//        recommendations.add($cottage);
//end
//
//rule "CottageNearMountain"
//    when
//        $cottage : Cottage(locationType == CottageLocationType.NEAR_MOUNTAIN)
//    then
//        recommendations.add($cottage);
//end
//
//rule "ApartmentMultipleTerraces"
//    when
//        $apartment : Apartment(numOfTerraces > 1)
//    then
//        recommendations.add($apartment);
//end
//
//rule "ApartmentMultipleParkingSpaces"
//    when
//        $apartment : Apartment(numOfParkingSpaces > 1)
//    then
//        recommendations.add($apartment);
//end
//
//rule "ApartmentAboveFirstFloor"
//    when
//        $apartment : Apartment(floorLevel > 1)
//    then
//        recommendations.add($apartment);
//end
//
//
//rule "HousesWithMoreThanOneFloor"
//when
//    $house : House(floors > 1)
//then
//      recommendations.add($house);
//end
//
//
//rule "HousesWithOneFloor"
//when
//    $house : House(floors == 1)
//then
//    System.out.println("This house has one floor.");
//    recommendations.add($house);
//end
//
//rule "LowPricedRealEstate"
//when
//    $realEstate : RealEstate(price < 50000)
//then
//    recommendations.add($realEstate);
//end
//
//rule "HighPricedRealEstate"
//when
//    $realEstate : RealEstate(price > 50000)
//then
//    recommendations.add($realEstate);
//end
//


